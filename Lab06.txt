#Task1(a)

def factorial(n):
    if n==1:
        return n
    return (n*factorial(n-1))

print(factorial(8))

#Task1(b)

def fibonaci(n):
    if n==1 or n==0:
        return n
    if a[n]==0:
        
        a[n]=fibonaci(n-1)+fibonaci(n-2)
        
    return a[n]
    
inp=int(input())
a=[0]*(inp+1)

print(fibonaci(inp))


#Task-1(C)

def printarray(a,i=0):
    if i==len(a):
        return

    print(a[i])
    printarray(a,i+1)

m=[1,2,3,4,5]
printarray(m)


#Task 1(d)
def powerbase(base,power):
    if power==0:
        return 1

    return base*powerbase(base,power-1)

print(powerbase(3,2))


#Task-2(a)

def binary(num):
    if num==0:
        return 0
    
    binary(num//2)
    st=num%2
    print(st,end="")
    
binary(16)

#Task-2(b)

class Node:
  def __init__(self, e, n):
    self.element = e
    self.next = n


class LinkedList:
  
  def __init__(self, a):

    
    if type(a)==list:
      self.head = Node(a[0],None)
      tail=self.head
      for i in range(1,len(a)):
        n=Node(a[i],None)
        tail.next=n
        tail=n

    else:
      self.head=a



#Task-2(c)

class Node:
  def __init__(self, e, n):
    self.element = e
    self.next = n


class LinkedList:
  
  def __init__(self, a):

    
    if type(a)==list:
      self.head = Node(a[0],None)
      tail=self.head
      for i in range(1,len(a)):
        n=Node(a[i],None)
        tail.next=n
        tail=n

    else:
      self.head=a

def backward(a1):
    if a1==None:
        return
    backward(a1.next)
    print(a1.element)
a=[1,2,3,4,5]
a1=LinkedList(a)
backward(a1.head)




# Task-3

def hocBuilder(height):
    if height==0:
        return 0
    elif height==1:
        return 8
    
    return 5+hocBuilder(height-1)

print(hocBuilder(10))



#Task-4(a)

def pattern(n,j=1):
    if n==1:
        return
    print(j,end="")
    pattern(n-1,j+1)

def caller(n,i=1):
    if i==n+1:
        return
    pattern(i+1)
    print()
    caller(n,i+1)

row=int(input())    
caller(row)


#Task-4(b)


def pattern(n,j=1):
    if n==1:
        return
    print(j,end="")
    pattern(n-1,j+1)

def space(n):
    if n<=0:
        return 
    
    print(" ",end="")
    space(n-1)

def caller(n,i=1):
    if i==n+1:
        return
    space(n-i)
    pattern(i+1)
    print()
    caller(n,i+1)

row=int(input())
caller(row)



#TASK-5

class FinalQ: 
    def print(self,array,idx): 
        if(idx<len(array)): 
            profit = self.calcProfit(array[idx])
            print(profit)
    
    def calcProfit(self,investment):
        if investment<=25000:
            return 0
        elif investment>100000:
            return 80+self.calcProfit(investment-1000)
    
        return 45+self.calcProfit(investment-1000)    
  
#Tester

array=[25000,100000,250000,350000] 
f = FinalQ() 

f.print(array,0)
f.print(array,1)
f.print(array,2)

f.print(array,3)
